/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/hello/": {
    /**
     * Hello 
     * @description Says hello and returns the user_id if the user is logged in
     */
    get: operations["hello_hello__get"];
  };
  "/v1/users/": {
    /**
     * Get Users 
     * @description This endpoint will return all users.
     */
    get: operations["get_users_v1_users__get"];
    /**
     * Create User 
     * @description This endpoint will take a user and create a new user.
     */
    post: operations["create_user_v1_users__post"];
  };
  "/v1/users/me": {
    /**
     * Get the current user 
     * @description This endpoint will return the current user
     */
    get: operations["get_me_v1_users_me_get"];
  };
  "/v1/users/{user_id}": {
    /**
     * Get User 
     * @description This endpoint will take a user id and return the user.
     */
    get: operations["get_user_v1_users__user_id__get"];
    /**
     * Delete User 
     * @description This endpoint will take a user id and delete the user.
     */
    delete: operations["delete_user_v1_users__user_id__delete"];
  };
  "/v1/api_keys/": {
    /**
     * Get Api Keys 
     * @description This endpoint will return all API Keys for a user.
     */
    get: operations["get_api_keys_v1_api_keys__get"];
    /**
     * Create Api Key 
     * @description This endpoint will create an API Key for a user.
     */
    post: operations["create_api_key_v1_api_keys__post"];
  };
  "/v1/api_keys/{api_key_id}": {
    /**
     * Get Api Key 
     * @description This endpoint will return an API Key.
     */
    get: operations["get_api_key_v1_api_keys__api_key_id__get"];
    /**
     * Delete Api Key 
     * @description This endpoint will delete an API Key.
     */
    delete: operations["delete_api_key_v1_api_keys__api_key_id__delete"];
  };
  "/v1/sbm/storyboards/": {
    /**
     * Get Storyboards 
     * @description This endpoint will return a list of all storyboards.
     */
    get: operations["get_storyboards_v1_sbm_storyboards__get"];
    /**
     * Create Storyboard 
     * @description This endpoint will take a story prompt and return a list of frames, each frame being a string frame description and an image URL.
     */
    post: operations["create_storyboard_v1_sbm_storyboards__post"];
  };
  "/v1/sbm/storyboards/{storyboard_id}": {
    /**
     * Get Storyboard 
     * @description This endpoint will take a storyboard id and return the entire storyboard object, with frames and styles and revisions.
     */
    get: operations["get_storyboard_v1_sbm_storyboards__storyboard_id__get"];
    /**
     * Update Storyboard 
     * @description This endpoint will take a storyboard id and style id, and return the entire storyboard object, with frames and styles and revisions.
     */
    post: operations["update_storyboard_v1_sbm_storyboards__storyboard_id__post"];
    /**
     * Delete Storyboard 
     * @description This endpoint will take a storyboard id and delete the entire storyboard object, with frames and styles and revisions.
     */
    delete: operations["delete_storyboard_v1_sbm_storyboards__storyboard_id__delete"];
  };
  "/v1/sbm/storyboards/{storyboard_id}/published": {
    /**
     * Get Storyboard Published 
     * @description This endpoint will take a storyboard id and return the entire storyboard object, with frames and styles and revisions. Essentially, published frames is the default frames of the published style.
     */
    get: operations["get_storyboard_published_v1_sbm_storyboards__storyboard_id__published_get"];
  };
  "/v1/sbm/storyboards/{storyboard_id}/frames": {
    /**
     * Get Storyboard Frames 
     * @description This endpoint will take a storyboard id and return all frames in the storyboard.
     */
    get: operations["get_storyboard_frames_v1_sbm_storyboards__storyboard_id__frames_get"];
  };
  "/v1/sbm/storyboards/{storyboard_id}/frames/{frame_index}": {
    /**
     * Get Storyboard Frame Index 
     * @description This endpoint will take a storyboard id and a frame index and return all frames in the storyboard with that index. For example, if the storyboard has 5 frames, and the frame index is 2, this endpoint will return the 3rd frame.
     */
    get: operations["get_storyboard_frame_index_v1_sbm_storyboards__storyboard_id__frames__frame_index__get"];
  };
  "/v1/sbm/frames/{frame_id}": {
    /**
     * Get Frame 
     * @description This endpoint will take a frame id and return the frame.
     */
    get: operations["get_frame_v1_sbm_frames__frame_id__get"];
    /**
     * Update Frame 
     * @description This endpoint will take a storyboard id and frame index, and return the revised frame.
     */
    post: operations["update_frame_v1_sbm_frames__frame_id__post"];
    /**
     * Delete Frame 
     * @description This endpoint will take a frame id and delete the frame.
     */
    delete: operations["delete_frame_v1_sbm_frames__frame_id__delete"];
  };
  "/v1/sbm/styles/": {
    /**
     * Get Styles 
     * @description This method will return a list of all the styles
     */
    get: operations["get_styles_v1_sbm_styles__get"];
    /**
     * Create Or Update Style 
     * @description This method will update a style
     */
    post: operations["create_or_update_style_v1_sbm_styles__post"];
  };
  "/v1/sbm/styles/{style_id}": {
    /**
     * Get Style 
     * @description This method will return a style
     */
    get: operations["get_style_v1_sbm_styles__style_id__get"];
    /**
     * Delete Style 
     * @description This method will delete a style
     */
    delete: operations["delete_style_v1_sbm_styles__style_id__delete"];
  };
  "/v1/scribe/transcriptions": {
    /**
     * Get Transcriptions 
     * @description Get all the transcription jobs for the user
     */
    get: operations["get_transcriptions_v1_scribe_transcriptions_get"];
    /**
     * Create a transcription job 
     * @description This method will create a transcription job from a file URL or return a presigned URL to upload an audio file to
     */
    post: operations["create_transcription_v1_scribe_transcriptions_post"];
  };
  "/v1/scribe/transcriptions/{transcription_id}": {
    /**
     * Get Transcription 
     * @description Get the transcription job status and results
     */
    get: operations["get_transcription_v1_scribe_transcriptions__transcription_id__get"];
  };
  "/v1/scribe/transcriptions/{transcription_id}/headings": {
    /** Create Transcription Headings */
    post: operations["create_transcription_headings_v1_scribe_transcriptions__transcription_id__headings_post"];
  };
  "/v1/scribe/transcriptions/{transcription_id}/summary": {
    /** Create Transcription Summary */
    post: operations["create_transcription_summary_v1_scribe_transcriptions__transcription_id__summary_post"];
  };
  "/aws/s3": {
    /** S3 Event Handler */
    put: operations["s3_event_handler_aws_s3_put"];
    /** S3 Event Handler */
    post: operations["s3_event_handler_aws_s3_post"];
    /** S3 Event Handler */
    delete: operations["s3_event_handler_aws_s3_delete"];
  };
  "/aws/sqs": {
    /** Sqs Event Handler */
    post: operations["sqs_event_handler_aws_sqs_post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** APIKey */
    APIKey: {
      /**
       * Api Key Id 
       * @description The API Key's unique id
       */
      api_key_id?: string;
      /**
       * User Id 
       * Format: uuid4 
       * @description The user's unique id
       */
      user_id: string;
      /**
       * Api Key Secret 
       * @description The API Key's secret, this is only accessible when creating a new API Key
       */
      api_key_secret?: string;
      /**
       * Api Key Secret Hash 
       * @description The API Key's secret hash
       */
      api_key_secret_hash?: string;
      /**
       * Metadata 
       * @description The API Key's metadata
       */
      metadata?: Record<string, never>;
      /**
       * Enabled 
       * @description Whether the API Key is enabled 
       * @default true
       */
      enabled?: boolean;
    };
    /** CreateStoryboardRequest */
    CreateStoryboardRequest: {
      /** Original Prompt */
      original_prompt: string;
      /** Frame Count */
      frame_count: number;
      /**
       * Style Id 
       * @description The style id, a random hex string of length 7 (14 characters)
       */
      style_id: string;
      /**
       * User Id 
       * Format: uuid4
       */
      user_id?: string;
    };
    /** CreateTranscriptionRequest */
    CreateTranscriptionRequest: {
      /**
       * Name 
       * @description The name of the transcription 
       * @example David Attenborough - Planet Earth II - Episode 1 - The Beasts of the Southern Wild
       */
      name?: string;
      /** @description Recipients of the transcription */
      recipients?: (components["schemas"]["TranscriptionRecipients"])[];
      /**
       * Url 
       * Format: uri 
       * @description The url of the audio file to be transcribed. If this is not provided, the audio file must be uploaded via the S3 presigned url 
       * @example https://storage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4
       */
      url?: string;
      /**
       * Translate 
       * @description Whether or not to translate the transcription into English 
       * @default false
       */
      translate?: boolean;
      /**
       * @description The language of the transcription. If this is not provided, the language will be detected automatically 
       * @example fa
       */
      language?: components["schemas"]["TranscriptionLanguage"];
      /**
       * Webhooks 
       * @description Webhooks to be called to update on the status of the transcription
       */
      webhooks?: (components["schemas"]["Webhook"])[];
    };
    /** CreateTranscriptionResponse */
    CreateTranscriptionResponse: {
      /**
       * Upload Request 
       * @description The request details to upload the audio file
       */
      upload_request?: Record<string, never>;
      /**
       * Transcription 
       * @description The transcription job
       */
      transcription: components["schemas"]["Transcription"];
    };
    /**
     * Frame 
     * @description Full Frame Model, with the fields required to place within a storyboard
     */
    Frame: {
      /** Prompt */
      prompt: string;
      /**
       * Image Url 
       * Format: uri
       */
      image_url: string;
      /**
       * Args 
       * @description The arguments used to generate the frame
       */
      args?: Record<string, never>;
      /**
       * @description The model used to generate the frame 
       * @default dall_e
       */
      model?: components["schemas"]["ImageGeneratorModel"];
      /**
       * Style Id 
       * @description The style id used to generate the frame
       */
      style_id: string;
      /** Frame Index */
      frame_index: number;
      /**
       * Frame Id 
       * @description The frame id, in the following format: (storyboard_id)_(index)_(style_revision)_(frame_revision)
       */
      frame_id: string;
      /**
       * Storyboard Id 
       * @description The storyboard id, a hex string of length 7 (14 characters)
       */
      storyboard_id: string;
      /**
       * Frame Revision 
       * @description The revision of the frame, incremented when the frame is updated 
       * @default 0
       */
      frame_revision?: number;
      /** Style Revision */
      style_revision: number;
      /**
       * Default 
       * @description Whether this frame is the default frame for the frame index and style revision 
       * @default false
       */
      default?: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /**
     * ImageGeneratorModel 
     * @description An enumeration. 
     * @enum {string}
     */
    ImageGeneratorModel: "replicate_sd_2" | "dall_e";
    /**
     * Storyboard 
     * @description Style Model, contains a prompt for style generation and a list of supported models
     */
    Storyboard: {
      /**
       * Storyboard Id 
       * @description The storyboard id, a hex string of length 7 (14 characters)
       */
      storyboard_id?: string;
      /**
       * User Id 
       * Format: uuid4
       */
      user_id: string;
      /**
       * Name 
       * @description The name of the storyboard
       */
      name?: string;
      /**
       * Description 
       * @description The description of the storyboard
       */
      description?: string;
      /**
       * @description The status of the storyboard 
       * @default pending
       */
      status?: components["schemas"]["StoryboardStatus"];
      /**
       * Original Prompt 
       * @description The original prompt for the storyboard
       */
      original_prompt: string;
      /**
       * Frames 
       * @description The frames in the storyboard, each frame has properties for the frame index, the style revision, and the frame revision
       */
      frames?: (components["schemas"]["Frame"])[];
      /**
       * Style Revisions 
       * @description Each item is the style id used to generate the corresponding revision of the storyboard
       */
      style_revisions?: (components["schemas"]["Style"])[];
      /**
       * Published Style Id 
       * @description The style to show when the storyboard is first loaded
       */
      published_style_id?: string;
      /**
       * Frame Count 
       * @description The number of frames in the storyboard
       */
      frame_count: number;
      /**
       * Total Frames 
       * @description The total number of frames in the storyboard, including revisions 
       * @default 0
       */
      total_frames?: number;
      /**
       * Created 
       * Format: date-time 
       * @description The datetime the storyboard was created
       */
      created?: string;
      /**
       * Updated 
       * Format: date-time 
       * @description The datetime the storyboard was last updated
       */
      updated?: string;
    };
    /**
     * StoryboardStatus 
     * @description The status of the storyboard  
     * @enum {string}
     */
    StoryboardStatus: "pending" | "processing" | "complete" | "failed";
    /**
     * Style 
     * @description Style Model, contains a prompt for style generation and a list of supported models
     */
    Style: {
      /**
       * Style Id 
       * @description The style id, a random hex string of length 7 (14 characters)
       */
      style_id?: string;
      /**
       * User Id 
       * Format: uuid4
       */
      user_id: string;
      /**
       * Name 
       * @description The name of the style
       */
      name: string;
      /**
       * Description 
       * @description The description of the style
       */
      description?: string;
      /**
       * Style Prompt 
       * @description The prompt for style generation. Must contain the token 'ge_replace_me' to mark where the prompt goes
       */
      style_prompt: string;
      /**
       * Negative Prompt 
       * @description The negative prompt for style generation.
       */
      negative_prompt?: string;
      /** @description If None, all models are supported */
      supported_models?: (components["schemas"]["ImageGeneratorModel"])[];
      /**
       * Public 
       * @description If true, the style is public and can be used by anyone 
       * @default false
       */
      public?: boolean;
      /**
       * Preset 
       * @description If true, the style is a preset and cannot be deleted 
       * @default false
       */
      preset?: boolean;
      /**
       * Preview 
       * Format: uri 
       * @description The url to the preview image for the style
       */
      preview?: string;
      /**
       * Deleted 
       * @description If true, the style is soft deleted and cannot be used 
       * @default false
       */
      deleted?: boolean;
    };
    /**
     * StyleModelRequest 
     * @description All we are doing here is overriding the id field to be optional, since it can be inferred from the request
     */
    StyleModelRequest: {
      /**
       * Style Id 
       * @description The style id, a random hex string of length 7 (14 characters)
       */
      style_id?: string;
      /**
       * User Id 
       * Format: uuid4
       */
      user_id?: string;
      /**
       * Name 
       * @description The name of the style
       */
      name: string;
      /**
       * Description 
       * @description The description of the style
       */
      description?: string;
      /**
       * Style Prompt 
       * @description The prompt for style generation. Must contain the token 'ge_replace_me' to mark where the prompt goes
       */
      style_prompt: string;
      /**
       * Negative Prompt 
       * @description The negative prompt for style generation.
       */
      negative_prompt?: string;
      /** @description If None, all models are supported */
      supported_models?: (components["schemas"]["ImageGeneratorModel"])[];
      /**
       * Public 
       * @description If true, the style is public and can be used by anyone 
       * @default false
       */
      public?: boolean;
      /**
       * Preset 
       * @description If true, the style is a preset and cannot be deleted 
       * @default false
       */
      preset?: boolean;
      /**
       * Preview 
       * Format: uri 
       * @description The url to the preview image for the style
       */
      preview?: string;
      /**
       * Deleted 
       * @description If true, the style is soft deleted and cannot be used 
       * @default false
       */
      deleted?: boolean;
    };
    /** TimestampedTextSegment */
    TimestampedTextSegment: {
      /**
       * Start 
       * @description Start time of the segment in seconds 
       * @example 0
       */
      start: number;
      /**
       * End 
       * @description End time of the segment in seconds 
       * @example 1
       */
      end: number;
      /**
       * Text 
       * @description Text of the segment 
       * @example Hello World
       */
      text: string;
    };
    /** TimestampedTextSegmentIndexed */
    TimestampedTextSegmentIndexed: {
      /**
       * Start 
       * @description Start time of the segment in seconds 
       * @example 0
       */
      start: number;
      /**
       * End 
       * @description End time of the segment in seconds 
       * @example 1
       */
      end: number;
      /**
       * Text 
       * @description Text of the segment 
       * @example Hello World
       */
      text: string;
      /**
       * Index 
       * @description The index of the block 
       * @example 1
       */
      index: number;
    };
    /**
     * Transcription 
     * @description Transcription Model
     */
    Transcription: {
      /**
       * Transcription Id 
       * @description Unique ID for the transcription
       */
      transcription_id?: string;
      /**
       * User Id 
       * Format: uuid4
       */
      user_id: string;
      /**
       * Created 
       * Format: date-time 
       * @description Time the transcription was created
       */
      created?: string;
      /**
       * Updated 
       * Format: date-time 
       * @description Time the transcription was last updated
       */
      updated?: string;
      /**
       * Name 
       * @description Name of the transcription 
       * @default
       */
      name?: string;
      /**
       * @description Current status of the transcription 
       * @default pending
       */
      status?: components["schemas"]["TranscriptionStatus"];
      /**
       * Orphaned 
       * @description Whether the transcription has orphaned files in S3 
       * @default false
       */
      orphaned?: boolean;
      /**
       * Translate 
       * @description Whether to translate the transcription 
       * @default false
       */
      translate?: boolean;
      /**
       * Error Message 
       * @description Error message if the transcription failed 
       * @example File is not a valid audio or video file
       */
      error_message?: string;
      /**
       * @description Recipients of the transcription 
       * @default [
       *   "all"
       * ]
       */
      recipients?: (components["schemas"]["TranscriptionRecipients"])[];
      /**
       * Webhooks 
       * @description Webhook URLs to send transcription to, along with the params
       */
      webhooks?: (components["schemas"]["Webhook"])[];
      /**
       * File Ffprobe 
       * @description FFProbe output for the file
       */
      file_ffprobe?: Record<string, never>;
      /**
       * File Mimetype 
       * @description Mimetype of file 
       * @example audio/webm
       */
      file_mimetype?: string;
      /**
       * File Extension 
       * @description File extension 
       * @example webm
       */
      file_extension?: string;
      /**
       * Url 
       * Format: uri 
       * @description URL of the file 
       * @example https://example.com/file.mp3
       */
      url?: string;
      /**
       * Duration Seconds 
       * @description Duration of the file in seconds 
       * @example 60
       */
      duration_seconds?: number;
      /**
       * Validated 
       * @description Whether the file has been validated 
       * @default false
       */
      validated?: boolean;
      /**
       * Uploaded 
       * @description Whether the file has been uploaded to S3 
       * @default false
       */
      uploaded?: boolean;
      /**
       * Transcribed 
       * @description Whether the file has been transcribed 
       * @default false
       */
      transcribed?: boolean;
      /**
       * @description Model used for transcription 
       * @example openai/whisper-base
       */
      transcription_model?: components["schemas"]["TranscriptionInferenceModel"];
      /**
       * @description Source of the transcription model 
       * @example huggingface
       */
      transcription_backend?: components["schemas"]["TranscriptionInferenceBackend"];
      /**
       * Progress 
       * @description Progress of the transcription (0 - 100) 
       * @default 0 
       * @example 50
       */
      progress?: number;
      /**
       * @description Language of the transcription 
       * @example fa
       */
      language?: components["schemas"]["TranscriptionLanguage"];
      /**
       * Text Segments 
       * @description Timestamped & processed transcription result from the model
       */
      text_segments?: (components["schemas"]["TimestampedTextSegment"])[];
      /**
       * Text 
       * @description Transcription text 
       * @example Hello world
       */
      text?: string;
      /**
       * Heading Segments 
       * @description Timestamped & processed transcription result from the model
       */
      heading_segments?: (components["schemas"]["TimestampedTextSegment"])[];
      /**
       * Summary 
       * @description Transcription summary 
       * @example In this document, someone said Hello World.
       */
      summary?: string;
    };
    /**
     * TranscriptionInferenceBackend 
     * @description An enumeration. 
     * @enum {unknown}
     */
    TranscriptionInferenceBackend: "huggingface" | "replicate" | "openai";
    /**
     * TranscriptionInferenceModel 
     * @description An enumeration. 
     * @enum {unknown}
     */
    TranscriptionInferenceModel: "openai/whisper-base" | "openai/whisper-medium" | "openai/whisper-large";
    /**
     * TranscriptionLanguage 
     * @description An enumeration. 
     * @enum {unknown}
     */
    TranscriptionLanguage: "af" | "am" | "ar" | "as" | "az" | "ba" | "be" | "bg" | "bn" | "bo" | "br" | "bs" | "ca" | "cs" | "cy" | "da" | "de" | "el" | "en" | "es" | "et" | "eu" | "fa" | "fi" | "fo" | "fr" | "gl" | "gu" | "ha" | "haw" | "hi" | "hr" | "ht" | "hu" | "hy" | "id" | "is" | "it" | "iw" | "ja" | "jw" | "ka" | "kk" | "km" | "kn" | "ko" | "la" | "lb" | "ln" | "lo" | "lt" | "lv" | "mg" | "mi" | "mk" | "ml" | "mn" | "mr" | "ms" | "mt" | "my" | "ne" | "nl" | "nn" | "no" | "oc" | "pa" | "pl" | "ps" | "pt" | "ro" | "ru" | "sa" | "sd" | "si" | "sk" | "sl" | "sn" | "so" | "sq" | "sr" | "su" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tl" | "tr" | "tt" | "uk" | "ur" | "uz" | "vi" | "yi" | "yo" | "zh";
    /**
     * TranscriptionRecipients 
     * @description An enumeration. 
     * @enum {unknown}
     */
    TranscriptionRecipients: "all" | "email" | "simplify";
    /**
     * TranscriptionStatus 
     * @description An enumeration. 
     * @enum {unknown}
     */
    TranscriptionStatus: "pending" | "uploaded" | "validating" | "validated" | "transcribing" | "transcribed" | "complete" | "validation_failed" | "failed";
    /** UpdateFrameRequest */
    UpdateFrameRequest: {
      /**
       * Prompt 
       * @description The prompt for the frame, should be a single sentence
       */
      prompt?: string;
      /**
       * Default 
       * @description If true, the frame will be set as the default frame for the frame index and style revision
       */
      default?: boolean;
    };
    /** UpdateStoryboardRequest */
    UpdateStoryboardRequest: {
      /**
       * Style Id 
       * @description The style id, a random hex string of length 7 (14 characters)
       */
      style_id?: string;
      /**
       * Name 
       * @description The name of the storyboard
       */
      name?: string;
      /**
       * Description 
       * @description The description of the storyboard
       */
      description?: string;
      /**
       * Published Style Id 
       * @description The style to show when the storyboard is first loaded. Set to empty string to unpublish.
       */
      published_style_id?: string;
    };
    /**
     * User 
     * @description User Model
     */
    User: {
      /**
       * User Id 
       * Format: uuid4 
       * @description The user's unique id
       */
      user_id?: string;
      /**
       * Name 
       * @description The user's full name 
       * @default Joe Schmoe
       */
      name?: string;
      /**
       * Email 
       * Format: email 
       * @description The user's email address
       */
      email: string;
      /**
       * @description The user's group 
       * @default USER
       */
      group?: components["schemas"]["UserGroup"];
      /**
       * Stripe Customer Id 
       * @description The user's stripe customer id
       */
      stripe_customer_id?: string;
    };
    /**
     * UserGroup 
     * @description An enumeration. 
     * @enum {unknown}
     */
    UserGroup: "ADMIN" | "USER";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Webhook */
    Webhook: {
      /**
       * Url 
       * @description The URL to send the webhook to
       */
      url: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  hello_hello__get: {
    /**
     * Hello 
     * @description Says hello and returns the user_id if the user is logged in
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  get_users_v1_users__get: {
    /**
     * Get Users 
     * @description This endpoint will return all users.
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["User"])[];
        };
      };
    };
  };
  create_user_v1_users__post: {
    /**
     * Create User 
     * @description This endpoint will take a user and create a new user.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_me_v1_users_me_get: {
    /**
     * Get the current user 
     * @description This endpoint will return the current user
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  get_user_v1_users__user_id__get: {
    /**
     * Get User 
     * @description This endpoint will take a user id and return the user.
     */
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_user_v1_users__user_id__delete: {
    /**
     * Delete User 
     * @description This endpoint will take a user id and delete the user.
     */
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_api_keys_v1_api_keys__get: {
    /**
     * Get Api Keys 
     * @description This endpoint will return all API Keys for a user.
     */
    parameters?: {
      query?: {
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["APIKey"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_api_key_v1_api_keys__post: {
    /**
     * Create Api Key 
     * @description This endpoint will create an API Key for a user.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["APIKey"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["APIKey"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_api_key_v1_api_keys__api_key_id__get: {
    /**
     * Get Api Key 
     * @description This endpoint will return an API Key.
     */
    parameters: {
      path: {
        api_key_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["APIKey"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_api_key_v1_api_keys__api_key_id__delete: {
    /**
     * Delete Api Key 
     * @description This endpoint will delete an API Key.
     */
    parameters: {
      path: {
        api_key_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["APIKey"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_storyboards_v1_sbm_storyboards__get: {
    /**
     * Get Storyboards 
     * @description This endpoint will return a list of all storyboards.
     */
    parameters?: {
      query?: {
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Storyboard"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_storyboard_v1_sbm_storyboards__post: {
    /**
     * Create Storyboard 
     * @description This endpoint will take a story prompt and return a list of frames, each frame being a string frame description and an image URL.
     */
    parameters?: {
      query?: {
        do_async?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateStoryboardRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Storyboard"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_storyboard_v1_sbm_storyboards__storyboard_id__get: {
    /**
     * Get Storyboard 
     * @description This endpoint will take a storyboard id and return the entire storyboard object, with frames and styles and revisions.
     */
    parameters: {
      path: {
        storyboard_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Storyboard"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_storyboard_v1_sbm_storyboards__storyboard_id__post: {
    /**
     * Update Storyboard 
     * @description This endpoint will take a storyboard id and style id, and return the entire storyboard object, with frames and styles and revisions.
     */
    parameters: {
      query?: {
        do_async?: boolean;
      };
      path: {
        storyboard_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateStoryboardRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Storyboard"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_storyboard_v1_sbm_storyboards__storyboard_id__delete: {
    /**
     * Delete Storyboard 
     * @description This endpoint will take a storyboard id and delete the entire storyboard object, with frames and styles and revisions.
     */
    parameters: {
      path: {
        storyboard_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_storyboard_published_v1_sbm_storyboards__storyboard_id__published_get: {
    /**
     * Get Storyboard Published 
     * @description This endpoint will take a storyboard id and return the entire storyboard object, with frames and styles and revisions. Essentially, published frames is the default frames of the published style.
     */
    parameters: {
      path: {
        storyboard_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Storyboard"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_storyboard_frames_v1_sbm_storyboards__storyboard_id__frames_get: {
    /**
     * Get Storyboard Frames 
     * @description This endpoint will take a storyboard id and return all frames in the storyboard.
     */
    parameters: {
      query?: {
        style_id?: string;
        default?: boolean;
      };
      path: {
        storyboard_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Frame"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_storyboard_frame_index_v1_sbm_storyboards__storyboard_id__frames__frame_index__get: {
    /**
     * Get Storyboard Frame Index 
     * @description This endpoint will take a storyboard id and a frame index and return all frames in the storyboard with that index. For example, if the storyboard has 5 frames, and the frame index is 2, this endpoint will return the 3rd frame.
     */
    parameters: {
      query?: {
        style_id?: string;
      };
      path: {
        storyboard_id: string;
        frame_index: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Frame"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_frame_v1_sbm_frames__frame_id__get: {
    /**
     * Get Frame 
     * @description This endpoint will take a frame id and return the frame.
     */
    parameters: {
      path: {
        frame_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Frame"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_frame_v1_sbm_frames__frame_id__post: {
    /**
     * Update Frame 
     * @description This endpoint will take a storyboard id and frame index, and return the revised frame.
     */
    parameters: {
      path: {
        frame_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFrameRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Frame"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_frame_v1_sbm_frames__frame_id__delete: {
    /**
     * Delete Frame 
     * @description This endpoint will take a frame id and delete the frame.
     */
    parameters: {
      path: {
        frame_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_styles_v1_sbm_styles__get: {
    /**
     * Get Styles 
     * @description This method will return a list of all the styles
     */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Style"])[];
        };
      };
    };
  };
  create_or_update_style_v1_sbm_styles__post: {
    /**
     * Create Or Update Style 
     * @description This method will update a style
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["StyleModelRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Style"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_style_v1_sbm_styles__style_id__get: {
    /**
     * Get Style 
     * @description This method will return a style
     */
    parameters: {
      path: {
        style_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Style"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_style_v1_sbm_styles__style_id__delete: {
    /**
     * Delete Style 
     * @description This method will delete a style
     */
    parameters: {
      path: {
        style_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_transcriptions_v1_scribe_transcriptions_get: {
    /**
     * Get Transcriptions 
     * @description Get all the transcription jobs for the user
     */
    parameters?: {
      query?: {
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["Transcription"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_transcription_v1_scribe_transcriptions_post: {
    /**
     * Create a transcription job 
     * @description This method will create a transcription job from a file URL or return a presigned URL to upload an audio file to
     */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTranscriptionRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CreateTranscriptionResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_transcription_v1_scribe_transcriptions__transcription_id__get: {
    /**
     * Get Transcription 
     * @description Get the transcription job status and results
     */
    parameters: {
      path: {
        transcription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Transcription"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_transcription_headings_v1_scribe_transcriptions__transcription_id__headings_post: {
    /** Create Transcription Headings */
    parameters: {
      query?: {
        regenerate?: boolean;
      };
      path: {
        transcription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["TimestampedTextSegmentIndexed"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_transcription_summary_v1_scribe_transcriptions__transcription_id__summary_post: {
    /** Create Transcription Summary */
    parameters: {
      query?: {
        regenerate?: boolean;
      };
      path: {
        transcription_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  s3_event_handler_aws_s3_put: {
    /** S3 Event Handler */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  s3_event_handler_aws_s3_post: {
    /** S3 Event Handler */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  s3_event_handler_aws_s3_delete: {
    /** S3 Event Handler */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  sqs_event_handler_aws_sqs_post: {
    /** Sqs Event Handler */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
}
